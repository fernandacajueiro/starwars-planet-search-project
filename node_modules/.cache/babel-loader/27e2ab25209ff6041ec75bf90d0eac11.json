{"ast":null,"code":"var _jsxFileName = \"/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({\n  children\n}) {\n  const [planets, setPlanets] = useState();\n  const [loading, setLoading] = useState(true);\n  const [filterByName, setFilterByName] = useState({\n    name: ''\n  });\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const results = await fetchPlanets();\n      setPlanets(results);\n      setLoading(false);\n    }\n\n    planetsFromAPI();\n  }, []);\n  const context = {\n    planets,\n    loading,\n    filterByName\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","PropTypes","PlanetsContext","fetchPlanets","Provider","children","planets","setPlanets","loading","setLoading","filterByName","setFilterByName","name","planetsFromAPI","results","context","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAhD;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,cAAf,GAAgC;AAC9B,YAAMC,OAAO,GAAG,MAAMX,YAAY,EAAlC;AACAI,MAAAA,UAAU,CAACO,OAAD,CAAV;AACAL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDI,IAAAA,cAAc;AACf,GAPQ,EAON,EAPM,CAAT;AASA,QAAME,OAAO,GAAG;AACdT,IAAAA,OADc;AAEdE,IAAAA,OAFc;AAGdE,IAAAA;AAHc,GAAhB;AAMA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGK,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,QADH,CADF;AAKD;;AAEDD,QAAQ,CAACY,SAAT,GAAqB;AACnBX,EAAAA,QAAQ,EAAEJ,SAAS,CAACgB,IAAV,CAAeC;AADN,CAArB;AAIA,eAAed,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({ children }) {\n  const [planets, setPlanets] = useState();\n  const [loading, setLoading] = useState(true);\n  const [filterByName, setFilterByName] = useState({ name: '' });\n\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const results = await fetchPlanets();\n      setPlanets(results);\n      setLoading(false);\n    }\n    planetsFromAPI();\n  }, []);\n\n  const context = {\n    planets,\n    loading,\n    filterByName,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ context }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}