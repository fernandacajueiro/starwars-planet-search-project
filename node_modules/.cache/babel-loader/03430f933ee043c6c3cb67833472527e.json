{"ast":null,"code":"var _jsxFileName = \"/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({\n  children\n}) {\n  // const initialState = {\n  //   results: {},\n  //   loading: true,\n  //   filters: {\n  //     filterByName: {\n  //       name: '',\n  //     },\n  //     filterByNumericValues: [\n  //       {\n  //         column: '',\n  //         comparison: '',\n  //         value: '0',\n  //       },\n  //     ],\n  //   },\n  // };\n  // const [state, setState] = useState(initialState);\n  const [planets, setPlanets] = useState();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const results = await fetchPlanets();\n      setPlanets(results);\n      setLoading(false);\n    }\n\n    planetsFromAPI();\n  }, []); // function handleChange({ name, value }) {\n  //   setState((prevState) => ({\n  //     ...prevState,\n  //     filters: {\n  //       ...prevState.filters,\n  //       filterByName: {\n  //         ...prevState.filterByName,\n  //         [name]: value,\n  //       },\n  //     },\n  //   }));\n  // }\n  // function handleDropdown({ name, value }) {\n  //   setState((prevState) => ({\n  //     ...prevState,\n  //     filters: {\n  //       ...prevState.filters,\n  //       filterByNumericValues: [{\n  //         ...prevState.filters.filterByNumericValues[0],\n  //         [name]: value,\n  //       }],\n  //     },\n  //   }));\n  // }\n\n  const context = {\n    planets,\n    loading,\n    handleChange,\n    handleDropdown\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","PropTypes","PlanetsContext","fetchPlanets","Provider","children","planets","setPlanets","loading","setLoading","planetsFromAPI","results","context","handleChange","handleDropdown","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,cAAf,GAAgC;AAC9B,YAAMC,OAAO,GAAG,MAAMR,YAAY,EAAlC;AACAI,MAAAA,UAAU,CAACI,OAAD,CAAV;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDC,IAAAA,cAAc;AACf,GAPQ,EAON,EAPM,CAAT,CAvB8B,CAgC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAME,OAAO,GAAG;AACdN,IAAAA,OADc;AAEdE,IAAAA,OAFc;AAGdK,IAAAA,YAHc;AAIdC,IAAAA;AAJc,GAAhB;AAOA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGF,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,QADH,CADF;AAKD;;AAEDD,QAAQ,CAACW,SAAT,GAAqB;AACnBV,EAAAA,QAAQ,EAAEJ,SAAS,CAACe,IAAV,CAAeC;AADN,CAArB;AAIA,eAAeb,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({ children }) {\n  // const initialState = {\n  //   results: {},\n  //   loading: true,\n  //   filters: {\n  //     filterByName: {\n  //       name: '',\n  //     },\n  //     filterByNumericValues: [\n  //       {\n  //         column: '',\n  //         comparison: '',\n  //         value: '0',\n  //       },\n  //     ],\n  //   },\n  // };\n\n  // const [state, setState] = useState(initialState);\n\n  const [planets, setPlanets] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const results = await fetchPlanets();\n      setPlanets(results);\n      setLoading(false);\n    }\n    planetsFromAPI();\n  }, []);\n\n  // function handleChange({ name, value }) {\n  //   setState((prevState) => ({\n  //     ...prevState,\n  //     filters: {\n  //       ...prevState.filters,\n  //       filterByName: {\n  //         ...prevState.filterByName,\n  //         [name]: value,\n  //       },\n  //     },\n  //   }));\n  // }\n\n  // function handleDropdown({ name, value }) {\n  //   setState((prevState) => ({\n  //     ...prevState,\n  //     filters: {\n  //       ...prevState.filters,\n  //       filterByNumericValues: [{\n  //         ...prevState.filters.filterByNumericValues[0],\n  //         [name]: value,\n  //       }],\n  //     },\n  //   }));\n  // }\n\n  const context = {\n    planets,\n    loading,\n    handleChange,\n    handleDropdown,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ context }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}