{"ast":null,"code":"var _jsxFileName = \"/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({\n  children\n}) {\n  // const initialState = {\n  //   results: {},\n  //   loading: true,\n  //   filters: {\n  //     filterByName: {\n  //       name: '',\n  //     },\n  //     filterByNumericValues: [\n  //       {\n  //         column: '',\n  //         comparison: '',\n  //         value: '0',\n  //       },\n  //     ],\n  //   },\n  // };\n  // const [state, setState] = useState(initialState);\n  const [planets, setPlanets] = useState();\n  const [loading, setLoading] = useState();\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const results = await fetchPlanets();\n      setPlanets(results);\n    }\n\n    planetsFromAPI();\n  }, []);\n\n  function handleChange({\n    name,\n    value\n  }) {\n    setState(prevState => ({ ...prevState,\n      filters: { ...prevState.filters,\n        filterByName: { ...prevState.filterByName,\n          [name]: value\n        }\n      }\n    }));\n  }\n\n  function handleDropdown({\n    name,\n    value\n  }) {\n    setState(prevState => ({ ...prevState,\n      filters: { ...prevState.filters,\n        filterByNumericValues: [{ ...prevState.filters.filterByNumericValues[0],\n          [name]: value\n        }]\n      }\n    }));\n  }\n\n  const context = {\n    planets,\n    handleChange,\n    handleDropdown\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","PropTypes","PlanetsContext","fetchPlanets","Provider","children","planets","setPlanets","loading","setLoading","planetsFromAPI","results","handleChange","name","value","setState","prevState","filters","filterByName","handleDropdown","filterByNumericValues","context","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,cAAf,GAAgC;AAC9B,YAAMC,OAAO,GAAG,MAAMR,YAAY,EAAlC;AACAI,MAAAA,UAAU,CAACI,OAAD,CAAV;AACD;;AACDD,IAAAA,cAAc;AACf,GANQ,EAMN,EANM,CAAT;;AAQA,WAASE,YAAT,CAAsB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAtB,EAAuC;AACrCC,IAAAA,QAAQ,CAAEC,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBC,MAAAA,OAAO,EAAE,EACP,GAAGD,SAAS,CAACC,OADN;AAEPC,QAAAA,YAAY,EAAE,EACZ,GAAGF,SAAS,CAACE,YADD;AAEZ,WAACL,IAAD,GAAQC;AAFI;AAFP;AAFc,KAAhB,CAAD,CAAR;AAUD;;AAED,WAASK,cAAT,CAAwB;AAAEN,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAxB,EAAyC;AACvCC,IAAAA,QAAQ,CAAEC,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBC,MAAAA,OAAO,EAAE,EACP,GAAGD,SAAS,CAACC,OADN;AAEPG,QAAAA,qBAAqB,EAAE,CAAC,EACtB,GAAGJ,SAAS,CAACC,OAAV,CAAkBG,qBAAlB,CAAwC,CAAxC,CADmB;AAEtB,WAACP,IAAD,GAAQC;AAFc,SAAD;AAFhB;AAFc,KAAhB,CAAD,CAAR;AAUD;;AAED,QAAMO,OAAO,GAAG;AACdf,IAAAA,OADc;AAEdM,IAAAA,YAFc;AAGdO,IAAAA;AAHc,GAAhB;AAMA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGE,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,QADH,CADF;AAKD;;AAEDD,QAAQ,CAACkB,SAAT,GAAqB;AACnBjB,EAAAA,QAAQ,EAAEJ,SAAS,CAACsB,IAAV,CAAeC;AADN,CAArB;AAIA,eAAepB,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({ children }) {\n  // const initialState = {\n  //   results: {},\n  //   loading: true,\n  //   filters: {\n  //     filterByName: {\n  //       name: '',\n  //     },\n  //     filterByNumericValues: [\n  //       {\n  //         column: '',\n  //         comparison: '',\n  //         value: '0',\n  //       },\n  //     ],\n  //   },\n  // };\n\n  // const [state, setState] = useState(initialState);\n\n  const [planets, setPlanets] = useState();\n  const [loading, setLoading] = useState();\n\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const results = await fetchPlanets();\n      setPlanets(results);\n    }\n    planetsFromAPI();\n  }, []);\n\n  function handleChange({ name, value }) {\n    setState((prevState) => ({\n      ...prevState,\n      filters: {\n        ...prevState.filters,\n        filterByName: {\n          ...prevState.filterByName,\n          [name]: value,\n        },\n      },\n    }));\n  }\n\n  function handleDropdown({ name, value }) {\n    setState((prevState) => ({\n      ...prevState,\n      filters: {\n        ...prevState.filters,\n        filterByNumericValues: [{\n          ...prevState.filters.filterByNumericValues[0],\n          [name]: value,\n        }],\n      },\n    }));\n  }\n\n  const context = {\n    planets,\n    handleChange,\n    handleDropdown,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ context }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}