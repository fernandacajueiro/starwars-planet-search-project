{"ast":null,"code":"var _jsxFileName = \"/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({\n  children\n}) {\n  const initialState = {\n    data: [],\n    loading: true,\n    filters: {\n      filterByName: {\n        name: ''\n      },\n      filterByNumericValues: [{\n        column: 'population',\n        comparison: 'maior que',\n        value: '100000'\n      }]\n    }\n  };\n  const [state, setState] = useState(initialState);\n\n  function handleChange({\n    name,\n    value\n  }) {\n    setState(prevState => ({ ...prevState,\n      filters: {\n        filterByName: { ...prevState.filterByName,\n          [name]: value\n        }\n      }\n    }));\n  }\n\n  function handleDropdown({\n    name,\n    value\n  }) {\n    setState(prevState => ({ ...prevState,\n      filters: {\n        filterByNumericValues: { ...prevState.filterByNumericValues[0],\n          [name]: value\n        }\n      }\n    }));\n  }\n\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const response = await fetchPlanets();\n      setState(prevState => ({ ...prevState,\n        data: response,\n        loading: false\n      }));\n    }\n\n    planetsFromAPI();\n  }, []);\n  const context = { ...state,\n    handleChange\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","PropTypes","PlanetsContext","fetchPlanets","Provider","children","initialState","data","loading","filters","filterByName","name","filterByNumericValues","column","comparison","value","state","setState","handleChange","prevState","handleDropdown","planetsFromAPI","response","context","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,IAAI,EAAE,EADa;AAEnBC,IAAAA,OAAO,EAAE,IAFU;AAGnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAE;AADM,OADP;AAIPC,MAAAA,qBAAqB,EAAE,CACrB;AACEC,QAAAA,MAAM,EAAE,YADV;AAEEC,QAAAA,UAAU,EAAE,WAFd;AAGEC,QAAAA,KAAK,EAAE;AAHT,OADqB;AAJhB;AAHU,GAArB;AAiBA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAACO,YAAD,CAAlC;;AAEA,WAASY,YAAT,CAAsB;AAAEP,IAAAA,IAAF;AAAQI,IAAAA;AAAR,GAAtB,EAAuC;AACrCE,IAAAA,QAAQ,CAAEE,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBV,MAAAA,OAAO,EAAE;AACPC,QAAAA,YAAY,EAAE,EACZ,GAAGS,SAAS,CAACT,YADD;AAEZ,WAACC,IAAD,GAAQI;AAFI;AADP;AAFc,KAAhB,CAAD,CAAR;AASD;;AAED,WAASK,cAAT,CAAwB;AAAET,IAAAA,IAAF;AAAQI,IAAAA;AAAR,GAAxB,EAAyC;AACvCE,IAAAA,QAAQ,CAAEE,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBV,MAAAA,OAAO,EAAE;AACPG,QAAAA,qBAAqB,EAAE,EACrB,GAAGO,SAAS,CAACP,qBAAV,CAAgC,CAAhC,CADkB;AAErB,WAACD,IAAD,GAAQI;AAFa;AADhB;AAFc,KAAhB,CAAD,CAAR;AASD;;AAEDf,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeqB,cAAf,GAAgC;AAC9B,YAAMC,QAAQ,GAAG,MAAMnB,YAAY,EAAnC;AACAc,MAAAA,QAAQ,CAAEE,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBZ,QAAAA,IAAI,EAAEe,QAFiB;AAGvBd,QAAAA,OAAO,EAAE;AAHc,OAAhB,CAAD,CAAR;AAKD;;AACDa,IAAAA,cAAc;AACf,GAVQ,EAUN,EAVM,CAAT;AAYA,QAAME,OAAO,GAAG,EACd,GAAGP,KADW;AAEdE,IAAAA;AAFc,GAAhB;AAKA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGK,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,QADH,CADF;AAKD;;AAEDD,QAAQ,CAACoB,SAAT,GAAqB;AACnBnB,EAAAA,QAAQ,EAAEJ,SAAS,CAACwB,IAAV,CAAeC;AADN,CAArB;AAIA,eAAetB,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({ children }) {\n  const initialState = {\n    data: [],\n    loading: true,\n    filters: {\n      filterByName: {\n        name: '',\n      },\n      filterByNumericValues: [\n        {\n          column: 'population',\n          comparison: 'maior que',\n          value: '100000',\n        },\n      ],\n    },\n  };\n\n  const [state, setState] = useState(initialState);\n\n  function handleChange({ name, value }) {\n    setState((prevState) => ({\n      ...prevState,\n      filters: {\n        filterByName: {\n          ...prevState.filterByName,\n          [name]: value,\n        },\n      },\n    }));\n  }\n\n  function handleDropdown({ name, value }) {\n    setState((prevState) => ({\n      ...prevState,\n      filters: {\n        filterByNumericValues: {\n          ...prevState.filterByNumericValues[0],\n          [name]: value,\n        },\n      },\n    }));\n  }\n\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const response = await fetchPlanets();\n      setState((prevState) => ({\n        ...prevState,\n        data: response,\n        loading: false,\n      }));\n    }\n    planetsFromAPI();\n  }, []);\n\n  const context = {\n    ...state,\n    handleChange,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ context }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}