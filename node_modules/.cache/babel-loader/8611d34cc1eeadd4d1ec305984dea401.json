{"ast":null,"code":"var _jsxFileName = \"/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({\n  children\n}) {\n  const [planets, setPlanets] = useState();\n  const [tableHeaders, setTableHeaders] = useState();\n  const [loading, setLoading] = useState(true);\n  const [filterByName, setFilterByName] = useState({\n    name: ''\n  });\n  const [columns, setColumns] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  const [sortState, setSortState] = useState({\n    sortColumn: 'name',\n    sortType: 'ASC'\n  });\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const results = await fetchPlanets();\n      setPlanets(results);\n      setTableHeaders(Object.keys(results[0]));\n      setLoading(false);\n    }\n\n    planetsFromAPI();\n  }, []);\n\n  function sortPlanets(planets, selector) {\n    let result = planets;\n\n    if (selector === 'name') {\n      result = planets.sort(a, b);\n    }\n  }\n\n  const context = {\n    planets,\n    tableHeaders,\n    loading,\n    filterByName,\n    setFilterByName,\n    columns,\n    setColumns,\n    filterByNumericValues,\n    setFilterByNumericValues,\n    sortState,\n    setSortState\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/fernanda/Documents/Projects/sd-09-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","PropTypes","PlanetsContext","fetchPlanets","Provider","children","planets","setPlanets","tableHeaders","setTableHeaders","loading","setLoading","filterByName","setFilterByName","name","columns","setColumns","filterByNumericValues","setFilterByNumericValues","sortState","setSortState","sortColumn","sortType","planetsFromAPI","results","Object","keys","sortPlanets","selector","result","sort","a","b","context","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,EAAhD;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC;AAAEe,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAhD;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CACpC,CAAC,YAAD,EAAe,gBAAf,EAAiC,UAAjC,EAA6C,iBAA7C,EAAgE,eAAhE,CADoC,CAAtC;AAGA,QAAM,CAACkB,qBAAD,EAAwBC,wBAAxB,IAAoDnB,QAAQ,CAAC,EAAD,CAAlE;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC;AACzCsB,IAAAA,UAAU,EAAE,MAD6B;AAEzCC,IAAAA,QAAQ,EAAE;AAF+B,GAAD,CAA1C;AAKAtB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeuB,cAAf,GAAgC;AAC9B,YAAMC,OAAO,GAAG,MAAMrB,YAAY,EAAlC;AACAI,MAAAA,UAAU,CAACiB,OAAD,CAAV;AACAf,MAAAA,eAAe,CAACgB,MAAM,CAACC,IAAP,CAAYF,OAAO,CAAC,CAAD,CAAnB,CAAD,CAAf;AACAb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDY,IAAAA,cAAc;AACf,GARQ,EAQN,EARM,CAAT;;AAUA,WAASI,WAAT,CAAqBrB,OAArB,EAA8BsB,QAA9B,EAAwC;AACtC,QAAIC,MAAM,GAAGvB,OAAb;;AACA,QAAIsB,QAAQ,KAAK,MAAjB,EAAyB;AACvBC,MAAAA,MAAM,GAAGvB,OAAO,CAACwB,IAAR,CAAaC,CAAb,EAAgBC,CAAhB,CAAT;AACD;AACF;;AAED,QAAMC,OAAO,GAAG;AACd3B,IAAAA,OADc;AAEdE,IAAAA,YAFc;AAGdE,IAAAA,OAHc;AAIdE,IAAAA,YAJc;AAKdC,IAAAA,eALc;AAMdE,IAAAA,OANc;AAOdC,IAAAA,UAPc;AAQdC,IAAAA,qBARc;AASdC,IAAAA,wBATc;AAUdC,IAAAA,SAVc;AAWdC,IAAAA;AAXc,GAAhB;AAcA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGa,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5B,QADH,CADF;AAKD;;AAEDD,QAAQ,CAAC8B,SAAT,GAAqB;AACnB7B,EAAAA,QAAQ,EAAEJ,SAAS,CAACkC,IAAV,CAAeC;AADN,CAArB;AAIA,eAAehC,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchPlanets from '../services/fetchPlanets';\n\nfunction Provider({ children }) {\n  const [planets, setPlanets] = useState();\n  const [tableHeaders, setTableHeaders] = useState();\n  const [loading, setLoading] = useState(true);\n  const [filterByName, setFilterByName] = useState({ name: '' });\n  const [columns, setColumns] = useState(\n    ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'],\n  );\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  const [sortState, setSortState] = useState({\n    sortColumn: 'name',\n    sortType: 'ASC',\n  });\n\n  useEffect(() => {\n    async function planetsFromAPI() {\n      const results = await fetchPlanets();\n      setPlanets(results);\n      setTableHeaders(Object.keys(results[0]));\n      setLoading(false);\n    }\n    planetsFromAPI();\n  }, []);\n\n  function sortPlanets(planets, selector) {\n    let result = planets;\n    if (selector === 'name') {\n      result = planets.sort(a, b)\n    }\n  }\n\n  const context = {\n    planets,\n    tableHeaders,\n    loading,\n    filterByName,\n    setFilterByName,\n    columns,\n    setColumns,\n    filterByNumericValues,\n    setFilterByNumericValues,\n    sortState,\n    setSortState,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ context }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}